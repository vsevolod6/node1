const zmq = require('zeromq');

class GameServer {
    constructor() {
        this.socket = null;
        this.currentRange = null;
        this.min = 0;
        this.max = 0;
        this.currentGuess = 0;
        this.attempts = 0;
    }

    async start() {
        try {
            // –°–æ–∑–¥–∞–µ–º REP (Reply) —Å–æ–∫–µ—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –∫–ª–∏–µ–Ω—Ç—É
            this.socket = new zmq.Reply();
            
            // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç –∫ –∞–¥—Ä–µ—Å—É
            await this.socket.bind('tcp://*:5555');
            console.log('–ì–æ—Ç–æ–≤ –∫ –∏–≥—Ä–µ...');
            console.log('–û–∂–∏–¥–∞—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ tcp://localhost:5555');

            // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            while (true) {
                const [message] = await this.socket.receive();
                await this.handleMessage(JSON.parse(message.toString()));
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
        }
    }

    async handleMessage(message) {
        console.log('–ü–æ–ª—É—á–µ–Ω–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', message);

        if (message.range) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
            await this.handleRangeMessage(message);
        } else if (message.hint) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            await this.handleHintMessage(message);
        } else {
            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await this.sendResponse({ error: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è' });
        }
    }

    async handleRangeMessage(message) {
        const [min, max] = message.range.split('-').map(Number);
        this.min = min;
        this.max = max;
        this.currentRange = { min, max };
        this.attempts = 0;

        console.log(`–ö–ª–∏–µ–Ω—Ç –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: ${min}-${max}`);
        
        // –î–µ–ª–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ–ø—ã—Ç–∫—É —É–≥–∞–¥–∞—Ç—å (—Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
        this.currentGuess = Math.floor((min + max) / 2);
        await this.sendGuess();
    }

    async handleHintMessage(message) {
        this.attempts++;

        if (message.hint === 'more') {
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${this.attempts}: ${this.currentGuess} - –Ω—É–∂–Ω–æ –ë–û–õ–¨–®–ï`);
            this.min = this.currentGuess + 1;
        } else if (message.hint === 'less') {
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${this.attempts}: ${this.currentGuess} - –Ω—É–∂–Ω–æ –ú–ï–ù–¨–®–ï`);
            this.max = this.currentGuess - 1;
        } else if (message.hint === 'correct') {
            console.log(`üéâ –£–≥–∞–¥–∞–ª —á–∏—Å–ª–æ ${this.currentGuess} –∑–∞ ${this.attempts} –ø–æ–ø—ã—Ç–æ–∫!`);
            await this.sendResponse({ result: 'win', attempts: this.attempts, number: this.currentGuess });
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É–∑–∏–ª–∏ –ª–∏ –º—ã –¥–∏–∞–ø–∞–∑–æ–Ω –¥–æ –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞
        if (this.min === this.max) {
            this.currentGuess = this.min;
            console.log(`–î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é —á–∏—Å–ª–æ: ${this.currentGuess}`);
            await this.sendGuess();
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
        if (this.min > this.max) {
            console.log('–û—à–∏–±–∫–∞: –¥–∏–∞–ø–∞–∑–æ–Ω —Å—Ç–∞–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º. –í–æ–∑–º–æ–∂–Ω–æ –∫–ª–∏–µ–Ω—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.');
            await this.sendResponse({ error: '–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω' });
            return;
        }

        // –î–µ–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–±–∏–Ω–∞—Ä–Ω—ã–π –ø–æ–∏—Å–∫)
        this.currentGuess = Math.floor((this.min + this.max) / 2);
        await this.sendGuess();
    }

    async sendGuess() {
        const response = { answer: this.currentGuess };
        console.log(`–û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ${this.currentGuess}`);
        await this.sendResponse(response);
    }

    async sendResponse(response) {
        await this.socket.send(JSON.stringify(response));
    }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const server = new GameServer();
server.start().catch(console.error);