const zmq = require('zeromq');

class GameClient {
    constructor(min, max) {
        this.min = parseInt(min);
        this.max = parseInt(max);
        this.secretNumber = this.generateSecretNumber();
        this.socket = null;
        this.serverAttempts = 0;
    }

    generateSecretNumber() {
        return Math.floor(Math.random() * (this.max - this.min + 1)) + this.min;
    }

    async start() {
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞
            if (this.min >= this.max) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ');
            }

            console.log(`–ó–∞–≥–∞–¥–∞–Ω–æ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ ${this.min}-${this.max}`);
            console.log(`–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ: ${this.secretNumber} (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)`);

            // –°–æ–∑–¥–∞–µ–º REQ (Request) —Å–æ–∫–µ—Ç –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É
            this.socket = new zmq.Request();
            this.socket.connect('tcp://localhost:5555');

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º
            await this.sendRange();

            // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∏–≥—Ä—ã
            await this.playGame();

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:', error);
        } finally {
            if (this.socket) {
                this.socket.close();
            }
        }
    }

    async sendRange() {
        const message = { range: `${this.min}-${this.max}` };
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –¥–∏–∞–ø–∞–∑–æ–Ω —Å–µ—Ä–≤–µ—Ä—É:', message);
        await this.socket.send(JSON.stringify(message));
    }

    async playGame() {
        while (true) {
            // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            const [response] = await this.socket.receive();
            const message = JSON.parse(response.toString());
            
            this.serverAttempts++;
            console.log(`–ü–æ–ø—ã—Ç–∫–∞ ${this.serverAttempts}: –°–µ—Ä–≤–µ—Ä –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–ª: ${message.answer}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
            if (message.answer === this.secretNumber) {
                console.log('üéâ –°–µ—Ä–≤–µ—Ä —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ!');
                await this.sendHint('correct');
                console.log(`–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫: ${this.serverAttempts}`);
                break;
            } else if (message.answer < this.secretNumber) {
                console.log(`–°–µ—Ä–≤–µ—Ä—É –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–∏—Å–ª–æ –ë–û–õ–¨–®–ï —á–µ–º ${message.answer}`);
                await this.sendHint('more');
            } else {
                console.log(`–°–µ—Ä–≤–µ—Ä—É –Ω—É–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —á–∏—Å–ª–æ –ú–ï–ù–¨–®–ï —á–µ–º ${message.answer}`);
                await this.sendHint('less');
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏
            await new Promise(resolve => setTimeout(resolve, 500));
        }
    }

    async sendHint(hint) {
        const message = { hint: hint };
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è—é –ø–æ–¥—Å–∫–∞–∑–∫—É —Å–µ—Ä–≤–µ—Ä—É:', message);
        await this.socket.send(JSON.stringify(message));
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.length !== 2) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node game-client.js <min> <max>');
    console.log('–ü—Ä–∏–º–µ—Ä: node game-client.js 1 100');
    process.exit(1);
}

const [min, max] = args;

// –ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞
const client = new GameClient(min, max);
client.start().catch(console.error);